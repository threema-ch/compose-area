version: 2

references:
  steps-integrationtests: &steps-integrationtests
    - attach_workspace:
        at: .

    # Load npm cache if possible.
    # Multiple caches are used to increase the chance of a cache hit.
    - restore_cache:
        keys:
          - v1-npm-cache-integrationtest-{{ arch }}-{{ .Branch }}
          - v1-npm-cache-integrationtest-{{ arch }}

    - run:
        name: Prepare non-global npm directory
        command: mkdir ~/.npm-global && npm config set prefix '~/.npm-global'
    - run:
        name: Set up test server
        command: >
          PATH=~/.npm-global/bin:$PATH
          && cd pkg
          && npm link
          && cd ../www
          && npm ci
          && npm link compose-area
    - run:
        name: Start test server
        command: cd www && npm run start
        background: true
    - run:
        name: Set up selenium tests
        command: cd selenium && npm ci
    - run:
        name: Run selenium tests
        command: cd selenium && npm test $BROWSER

    # Save cache
    - save_cache:
        key: v1-npm-cache-integrationtest-{{ arch }}-{{ .Branch }}
        paths:
          - www/node_modules
          - selenium/node_modules
    - save_cache:
        key: v1-npm-cache-integrationtest-{{ arch }}
        paths:
          - www/node_modules
          - selenium/node_modules

jobs:

  build:
    docker:
      - image: rust:latest
    steps:
      - checkout

      # Load cargo target from cache if possible.
      # Multiple caches are used to increase the chance of a cache hit.
      - restore_cache:
          keys:
            - v2-cargo-cache-build-{{ arch }}-{{ .Branch }}
            - v2-cargo-cache-build-{{ arch }}

      # Install wasm
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown

      # Install wasm tools
      - run:
          name: Install wasm-pack
          command: >
            curl -L https://github.com/rustwasm/wasm-pack/releases/download/v0.8.1/wasm-pack-v0.8.1-x86_64-unknown-linux-musl.tar.gz
            | tar --strip-components=1 --wildcards -xzf - "*/wasm-pack"
            && chmod +x wasm-pack
            && mv wasm-pack $CARGO_HOME/bin/

      # Show versions
      - run:
          name: Show versions
          command: rustc --version && cargo --version && wasm-pack --version

      # Build
      - run:
          name: Build compose-area
          command: wasm-pack build --release -t browser
      - persist_to_workspace:
          root: .
          paths:
            - pkg
            - selenium
            - www

      # Save cache
      - save_cache:
          key: v2-cargo-cache-build-{{ arch }}-{{ .Branch }}
          paths:
            - target
            - /usr/local/cargo
      - save_cache:
          key: v2-cargo-cache-build-{{ arch }}
          paths:
            - /usr/local/cargo

  lint:
    docker:
      - image: rust:latest
    steps:
      - checkout

      # Load cargo target from cache if possible.
      # Multiple caches are used to increase the chance of a cache hit.
      - restore_cache:
          keys:
            - v2-cargo-cache-lint-{{ arch }}-{{ .Branch }}
            - v2-cargo-cache-lint-{{ arch }}

      # Install clippy
      - run:
          name: Install clippy
          command: rustup component add clippy

      # Show versions
      - run:
          name: Show versions
          command: rustc --version && cargo --version && cargo clippy --version

      # Run linting checks
      - run:
          name: Run clippy
          command: cargo clean && cargo clippy --all-targets --all-features

      # Save cache
      - save_cache:
          key: v2-cargo-cache-lint-{{ arch }}-{{ .Branch }}
          paths:
            - /usr/local/cargo
      - save_cache:
          key: v2-cargo-cache-lint-{{ arch }}
          paths:
            - /usr/local/cargo

  fmt:
    docker:
      - image: rust:latest
    steps:
      - checkout

      # Load cargo target from cache if possible.
      # Multiple caches are used to increase the chance of a cache hit.
      - restore_cache:
          keys:
            - v2-cargo-cache-fmt-{{ arch }}-{{ .Branch }}
            - v2-cargo-cache-fmt-{{ arch }}

      # Install rustfmt
      - run:
          name: Install rustfmt
          command: rustup component add rustfmt

      # Show versions
      - run:
          name: Show versions
          command: rustc --version && cargo --version && cargo fmt --version

      # Run format checks
      - run:
          name: Run rustfmt
          command: cargo fmt -- --check

      # Save cache
      - save_cache:
          key: v2-cargo-cache-fmt-{{ arch }}-{{ .Branch }}
          paths:
            - /usr/local/cargo
      - save_cache:
          key: v2-cargo-cache-fmt-{{ arch }}
          paths:
            - /usr/local/cargo

  test-unit:
    docker:
      - image: rust:latest
    steps:
      - checkout

      # Load cargo target from cache if possible.
      # Multiple caches are used to increase the chance of a cache hit.
      - restore_cache:
          keys:
            - v2-cargo-cache-unittest-{{ arch }}-{{ .Branch }}
            - v2-cargo-cache-unittest-{{ arch }}

      # Show versions
      - run:
          name: Show versions
          command: rustc --version && cargo --version

      # Run tests
      - run:
          name: Run unit tests
          command: cargo test

      # Save cache
      - save_cache:
          key: v2-cargo-cache-unittest-{{ arch }}-{{ .Branch }}
          paths:
            - target
            - /usr/local/cargo
      - save_cache:
          key: v2-cargo-cache-unittest-{{ arch }}
          paths:
            - /usr/local/cargo

  test-browser:
    docker:
      - image: rust:latest
    steps:
      - checkout

      # Load cargo target from cache if possible.
      # Multiple caches are used to increase the chance of a cache hit.
      - restore_cache:
          keys:
            - v2-cargo-cache-browsertest-{{ arch }}-{{ .Branch }}
            - v2-cargo-cache-browsertest-{{ arch }}

      # Install wasm
      - run:
          name: Add wasm32 target
          command: rustup target add wasm32-unknown-unknown

      # Install wasm tools
      - run:
          name: Install wasm-pack
          command: >
            curl -L https://github.com/rustwasm/wasm-pack/releases/download/v0.8.1/wasm-pack-v0.8.1-x86_64-unknown-linux-musl.tar.gz
            | tar --strip-components=1 --wildcards -xzf - "*/wasm-pack"
            && chmod +x wasm-pack
            && mv wasm-pack $CARGO_HOME/bin/

      # Install browsers
      - run:
          name: Install latest firefox
          command: >
            apt-get update
            && apt-get install -y libgtk-3-0 libdbus-glib-1-2 libx11-xcb1
            && wget -q -O - "https://download.mozilla.org/?product=firefox-latest-ssl&os=linux64&lang=en-US"
            |  tar xj

      # Show versions
      - run:
          name: Show versions
          command: rustc --version && cargo --version && wasm-pack --version && firefox/firefox --version

      # Run tests
      - run:
          name: Run browser unit tests
          command: PATH=$(pwd)/firefox:$PATH wasm-pack test --headless --firefox

      # Save cache
      - save_cache:
          key: v2-cargo-cache-browsertest-{{ arch }}-{{ .Branch }}
          paths:
            - target
            - /usr/local/cargo
      - save_cache:
          key: v2-cargo-cache-browsertest-{{ arch }}
          paths:
            - /usr/local/cargo

  test-integration-firefox:
    docker:
      - image: circleci/node:16-browsers
    steps: *steps-integrationtests
    environment:
      BROWSER: firefox

  test-integration-chrome:
    docker:
      - image: circleci/node:16-browsers
    steps: *steps-integrationtests
    environment:
      BROWSER: chrome

  audit:
    docker:
      - image: dbrgn/cargo-audit:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-cargo-audit-cache
      - run:
          name: Show versions
          command: rustc --version && cargo --version && cargo audit --version
      - run:
          name: Run cargo audit
          command: cargo audit
      - save_cache:
          key: v2-cargo-audit-cache
          paths:
            - /usr/local/cargo

  deploy-demo:
    docker:
      - image: circleci/node:16
    environment:
      OUT: html
    steps:
      - checkout
      - attach_workspace:
          at: .

      # Load npm cache if possible.
      # Multiple caches are used to increase the chance of a cache hit.
      - restore_cache:
          keys:
            - v1-npm-cache-demo-{{ arch }}-{{ .Branch }}
            - v1-npm-cache-demo-{{ arch }}

      # Prepare demo
      - run:
          name: Build demo page
          command: >
            cd www
            && echo "Installing dependencies..."
            && npm ci
            && echo "Copying npm package..."
            && rm -r node_modules/compose-area
            && cp -Rv ../pkg node_modules/compose-area
            && echo "Build..."
            && npm run build
            && cd ..
      - run:
          name: Prepare dist files
          command: >
            mkdir $OUT
            && touch $OUT/.nojekyll
            && cp -Rv www/dist/* $OUT/
            && export VERSION=$(git show -s --format="Version: %h (%ci)")
            && sed -i "s/\[\[VERSION\]\]/${VERSION}/" $OUT/index.html
            && sed -i "s/\[\[VERSION\]\]/${VERSION}/" $OUT/benchmark.html

      # Deploy
      - run:
          name: Install and configure deployment dependencies
          command: >
            npm install gh-pages@2
            && git config user.email "ci-build@circleci"
            && git config user.name "ci-build"
      - add_ssh_keys:
          fingerprints:
            - "32:c5:e4:2f:85:f2:6b:3e:ae:fa:60:9d:15:66:0e:55"
      - run:
          name: Deploy demo to gh-pages branch
          command: node_modules/.bin/gh-pages --dotfiles --message "[skip ci] Updates" --dist $OUT

      # Save cache
      - save_cache:
          key: v1-npm-cache-demo-{{ arch }}-{{ .Branch }}
          paths:
            - www/node_modules
            - selenium/node_modules
      - save_cache:
          key: v1-npm-cache-demo-{{ arch }}
          paths:
            - www/node_modules
            - selenium/node_modules

workflows:
  version: 2

  build-and-test:
    jobs:
      - build
      - lint
      - fmt
      - test-unit
      - test-browser
      - test-integration-firefox:
          requires:
            - build
      - test-integration-chrome:
          requires:
            - build
      - deploy-demo:
          requires:
            - build
            - test-integration-firefox
            - test-integration-chrome
          filters:
            branches:
              only: master

  # Build master every week on Monday at 03:00 am
  weekly:
    triggers:
      - schedule:
          cron: "0 3 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - build
      - lint
      - fmt
      - test-unit
      - test-browser
      - test-integration-firefox:
          requires:
            - build
      - test-integration-chrome:
          requires:
            - build
      - audit
